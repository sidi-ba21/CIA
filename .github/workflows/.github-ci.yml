name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: read
  security-events: write
  issues: read
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build backend image
      run: docker build -t my-backend-image:latest -f back_student/Dockerfile .

    - name: Build frontend image
      run: docker build -t my-frontend-image:latest -f front_student/Dockerfile .

    - name: Save Docker images to files
      run: |
        docker save my-backend-image:latest -o my-backend-image.tar
        docker save my-frontend-image:latest -o my-frontend-image.tar

    - name: Upload Docker images as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          my-backend-image.tar
          my-frontend-image.tar

  scan:
    runs-on: ubuntu-latest
    needs: build

    outputs:
      critical_found_backend: ${{ steps.check_backend.outputs.critical_found_backend }}
      critical_found_frontend: ${{ steps.check_frontend.outputs.critical_found_frontend }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download Docker images
      uses: actions/download-artifact@v2
      with:
        name: docker-images

    - name: Load Docker images from files
      run: |
        docker load -i my-backend-image.tar
        docker load -i my-frontend-image.tar

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.deb
        sudo dpkg -i trivy_0.22.0_Linux-64bit.deb

    - name: Scan backend image with Trivy and save report
      run: trivy image -o trivy-backend-report.txt my-backend-image:latest

    - name: Scan frontend image with Trivy and save report
      run: trivy image -o trivy-frontend-report.txt my-frontend-image:latest

    - name: Upload Trivy reports as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trivy-reports
        path: |
          trivy-backend-report.txt
          trivy-frontend-report.txt

    - name: Check for critical vulnerabilities in backend report
      id: check_backend
      run: |
        if grep -q "CRITICAL" trivy-backend-report.txt; then
          echo "critical_found_backend=true" >> $GITHUB_ENV
          echo "::set-output name=critical_found_backend::true"
        else
          echo "critical_found_backend=false" >> $GITHUB_ENV
          echo "::set-output name=critical_found_backend::false"
        fi

    - name: Check for critical vulnerabilities in frontend report
      id: check_frontend
      run: |
        if grep -q "CRITICAL" trivy-frontend-report.txt; then
          echo "critical_found_frontend=true" >> $GITHUB_ENV
          echo "::set-output name=critical_found_frontend::true"
        else
          echo "critical_found_frontend=false" >> $GITHUB_ENV
          echo "::set-output name=critical_found_frontend::false"
        fi

  check_dependabot:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Fetch Dependabot Alerts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.vixen+json" \
             https://api.github.com/repos/${{ github.repository }}/dependabot/alerts > dependabot-alerts.json

    # - name: Print Dependabot Alerts
    #   run: cat dependabot-alerts.json

    # - name: Check for High or Critical Dependabot Alerts
    #   id: check_dependabot
    #   run: |
    #     cat dependabot-alerts.json | jq '.[] | select(.security_advisory.severity == "high" or .security_advisory.severity == "critical")' > high_critical_alerts.json
    #     if [ -s high_critical_alerts.json ]; then
    #       echo "high_or_critical_found=true" >> $GITHUB_ENV
    #       echo "::set-output name=high_or_critical_found::true"
    #     else
    #       echo "high_or_critical_found=false" >> $GITHUB_ENV
    #       echo "::set-output name=high_or_critical_found::false"
    #     fi

  check_codeql:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Fetch CodeQL Alerts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.vixen+json" \
             https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts > codeql-alerts.json

    - name: Print CodeQl Alerts
      run: cat codeql-alerts.json

    - name: Check for High or Critical CodeQL Alerts
      id: check_codeql
      run: |
        cat codeql-alerts.json | jq '.[] | select(.rule.severity == "high" or .rule.severity == "critical")' > high_critical_codeql_alerts.json
        if [ -s high_critical_codeql_alerts.json ]; then
          echo "high_or_critical_codeql_found=true" >> $GITHUB_ENV
          echo "::set-output name=high_or_critical_codeql_found::true"
        else
          echo "high_or_critical_codeql_found=false" >> $GITHUB_ENV
          echo "::set-output name=high_or_critical_codeql_found::false"
        fi

  deploy:
    runs-on: ubuntu-latest
    needs: [scan, check_dependabot, check_codeql]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Decide deployment
      run: |
        if [ "${{ needs.scan.outputs.critical_found_backend }}" == "true" ] || [ "${{ needs.scan.outputs.critical_found_frontend }}" == "true" ] || [ "${{ needs.check_dependabot.outputs.high_or_critical_found }}" == "true" ] || [ "${{ needs.check_codeql.outputs.high_or_critical_codeql_found }}" == "true" ]; then
          echo "don't deploy critical vulnerabilities detected"
          exit 1
        else
          echo "you can deploy safely"
          # Add your deployment steps here
          # e.g., docker push, kubectl apply, etc.
        fi