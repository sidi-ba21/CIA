name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build backend image
      run: docker build -t my-backend-image:latest -f back_student/Dockerfile .

    - name: Build frontend image
      run: docker build -t my-frontend-image:latest -f front_student/Dockerfile .

    - name: Save Docker image digest
      run: |
        echo "BACKEND_DIGEST=$(docker inspect --format='{{index .Id}}' my-backend-image:latest)" >> $GITHUB_ENV
        echo "FRONTEND_DIGEST=$(docker inspect --format='{{index .Id}}' my-frontend-image:latest)" >> $GITHUB_ENV

  scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.deb
        sudo dpkg -i trivy_0.22.0_Linux-64bit.deb

    - name: Load Docker images
      run: |
        docker pull my-backend-image:latest
        docker pull my-frontend-image:latest

    - name: Scan backend image with Trivy and save report
      run: trivy image -o trivy-backend-report.txt my-backend-image:latest

    - name: Scan frontend image with Trivy and save report
      run: trivy image -o trivy-frontend-report.txt my-frontend-image:latest

    - name: Upload Trivy reports as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trivy-reports
        path: |
          trivy-backend-report.txt
          trivy-frontend-report.txt

    - name: Check for critical vulnerabilities in backend report
      id: check_backend
      run: |
        if grep -q "CRITICAL" trivy-backend-report.txt; then
          echo "critical_found_backend=true" >> $GITHUB_ENV
        else
          echo "critical_found_backend=false" >> $GITHUB_ENV
        fi

    - name: Check for critical vulnerabilities in frontend report
      id: check_frontend
      run: |
        if grep -q "CRITICAL" trivy-frontend-report.txt; then
          echo "critical_found_frontend=true" >> $GITHUB_ENV
        else
          echo "critical_found_frontend=false" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: scan

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Decide deployment
      run: |
        if [ "$critical_found_backend" == "true" ] || [ "$critical_found_frontend" == "true" ]; then
          echo "don't deploy critical vulnerabilities detected"
          exit 1
        else
          echo "you can deploy safely"
          # Add your deployment steps here
          # e.g., docker push, kubectl apply, etc.
        fi
      env:
        critical_found_backend: ${{ needs.scan.outputs.critical_found_backend }}
        critical_found_frontend: ${{ needs.scan.outputs.critical_found_frontend }}
