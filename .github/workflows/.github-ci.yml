name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  sonarqube:
    runs-on: self-hosted
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache SonarQube
      uses: actions/cache@v2
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar-${{ hashFiles('**/*.properties') }}
        restore-keys: |
          ${{ runner.os }}-sonar-

    - name: Install SonarQube Scanner
      run: |
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner-cli-4.6.2.2472-linux.zip -d $HOME
        export PATH="$HOME/sonar-scanner-4.6.2.2472-linux/bin:$PATH"

    - name: Run SonarQube Scan for Backend
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd back_student
        sonar-scanner \
          -Dsonar.login=$SONAR_TOKEN

    - name: Run SonarQube Scan for Frontend
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd ../front_student
        sonar-scanner \
          -Dsonar.login=$SONAR_TOKEN

  build:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build backend image
      run: docker build -t my-backend-image:latest -f back_student/Dockerfile .

    - name: Build frontend image
      run: docker build -t my-frontend-image:latest -f front_student/Dockerfile .

    - name: Save Docker images to files
      run: |
        docker save my-backend-image:latest -o my-backend-image.tar
        docker save my-frontend-image:latest -o my-frontend-image.tar

    - name: Upload Docker images as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          my-backend-image.tar
          my-frontend-image.tar

  # scan:
  #   runs-on: ubuntu-latest
  #   needs: build

  #   outputs:
  #     critical_found_backend: ${{ steps.check_backend.outputs.critical_found_backend }}
  #     critical_found_frontend: ${{ steps.check_frontend.outputs.critical_found_frontend }}

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Download Docker images
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: docker-images

  #   - name: Load Docker images from files
  #     run: |
  #       docker load -i my-backend-image.tar
  #       docker load -i my-frontend-image.tar

  #   - name: Install Trivy
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y wget
  #       wget https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.deb
  #       sudo dpkg -i trivy_0.22.0_Linux-64bit.deb

  #   - name: Scan backend image with Trivy and save report
  #     run: trivy image -o trivy-backend-report.txt my-backend-image:latest

  #   - name: Scan frontend image with Trivy and save report
  #     run: trivy image -o trivy-frontend-report.txt my-frontend-image:latest

  #   - name: Upload Trivy reports as artifacts
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: trivy-reports
  #       path: |
  #         trivy-backend-report.txt
  #         trivy-frontend-report.txt

  #   - name: Check for critical vulnerabilities in backend report
  #     id: check_backend
  #     run: |
  #       if grep -q "CRITICAL" trivy-backend-report.txt; then
  #         echo "critical_found_backend=true" >> $GITHUB_ENV
  #         echo "::set-output name=critical_found_backend::true"
  #       else
  #         echo "critical_found_backend=false" >> $GITHUB_ENV
  #         echo "::set-output name=critical_found_backend::false"
  #       fi

  #   - name: Check for critical vulnerabilities in frontend report
  #     id: check_frontend
  #     run: |
  #       if grep -q "CRITICAL" trivy-frontend-report.txt; then
  #         echo "critical_found_frontend=true" >> $GITHUB_ENV
  #         echo "::set-output name=critical_found_frontend::true"
  #       else
  #         echo "critical_found_frontend=false" >> $GITHUB_ENV
  #         echo "::set-output name=critical_found_frontend::false"
  #       fi

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: scan

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2

  #   - name: Decide deployment
  #     run: |
  #       if [ "${{ needs.scan.outputs.critical_found_backend }}" == "true" ] || [ "${{ needs.scan.outputs.critical_found_frontend }}" == "true" ]; then
  #         echo "don't deploy critical vulnerabilities detected"
  #         exit 1
  #       else
  #         echo "you can deploy safely"
  #         # Add your deployment steps here
  #         # e.g., docker push, kubectl apply, etc.
  #       fi